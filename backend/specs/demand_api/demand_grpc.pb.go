// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: demand.proto

package demand_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DemandService_GetDemands_FullMethodName   = "/DemandService/GetDemands"
	DemandService_CreateDemand_FullMethodName = "/DemandService/CreateDemand"
	DemandService_DeleteDemand_FullMethodName = "/DemandService/DeleteDemand"
)

// DemandServiceClient is the client API for DemandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemandServiceClient interface {
	GetDemands(ctx context.Context, in *DemandsReq, opts ...grpc.CallOption) (*DemandsRes, error)
	CreateDemand(ctx context.Context, in *CreateDemandReq, opts ...grpc.CallOption) (*Demand, error)
	DeleteDemand(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type demandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDemandServiceClient(cc grpc.ClientConnInterface) DemandServiceClient {
	return &demandServiceClient{cc}
}

func (c *demandServiceClient) GetDemands(ctx context.Context, in *DemandsReq, opts ...grpc.CallOption) (*DemandsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DemandsRes)
	err := c.cc.Invoke(ctx, DemandService_GetDemands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demandServiceClient) CreateDemand(ctx context.Context, in *CreateDemandReq, opts ...grpc.CallOption) (*Demand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Demand)
	err := c.cc.Invoke(ctx, DemandService_CreateDemand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demandServiceClient) DeleteDemand(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DemandService_DeleteDemand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemandServiceServer is the server API for DemandService service.
// All implementations must embed UnimplementedDemandServiceServer
// for forward compatibility.
type DemandServiceServer interface {
	GetDemands(context.Context, *DemandsReq) (*DemandsRes, error)
	CreateDemand(context.Context, *CreateDemandReq) (*Demand, error)
	DeleteDemand(context.Context, *IdReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedDemandServiceServer()
}

// UnimplementedDemandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDemandServiceServer struct{}

func (UnimplementedDemandServiceServer) GetDemands(context.Context, *DemandsReq) (*DemandsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemands not implemented")
}
func (UnimplementedDemandServiceServer) CreateDemand(context.Context, *CreateDemandReq) (*Demand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDemand not implemented")
}
func (UnimplementedDemandServiceServer) DeleteDemand(context.Context, *IdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDemand not implemented")
}
func (UnimplementedDemandServiceServer) mustEmbedUnimplementedDemandServiceServer() {}
func (UnimplementedDemandServiceServer) testEmbeddedByValue()                       {}

// UnsafeDemandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemandServiceServer will
// result in compilation errors.
type UnsafeDemandServiceServer interface {
	mustEmbedUnimplementedDemandServiceServer()
}

func RegisterDemandServiceServer(s grpc.ServiceRegistrar, srv DemandServiceServer) {
	// If the following call pancis, it indicates UnimplementedDemandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DemandService_ServiceDesc, srv)
}

func _DemandService_GetDemands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemandsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemandServiceServer).GetDemands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DemandService_GetDemands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemandServiceServer).GetDemands(ctx, req.(*DemandsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemandService_CreateDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDemandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemandServiceServer).CreateDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DemandService_CreateDemand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemandServiceServer).CreateDemand(ctx, req.(*CreateDemandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemandService_DeleteDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemandServiceServer).DeleteDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DemandService_DeleteDemand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemandServiceServer).DeleteDemand(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DemandService_ServiceDesc is the grpc.ServiceDesc for DemandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DemandService",
	HandlerType: (*DemandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDemands",
			Handler:    _DemandService_GetDemands_Handler,
		},
		{
			MethodName: "CreateDemand",
			Handler:    _DemandService_CreateDemand_Handler,
		},
		{
			MethodName: "DeleteDemand",
			Handler:    _DemandService_DeleteDemand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demand.proto",
}
