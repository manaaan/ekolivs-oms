// Package zettle provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package zettle

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ZettleOauthScopes = "ZettleOauth.Scopes"
)

// Defines values for ConstraintViolationConstraintType.
const (
	DATEMUSTBEINTHEFUTURE  ConstraintViolationConstraintType = "DATE_MUST_BE_IN_THE_FUTURE"
	DATEMUSTBEINTHEPAST    ConstraintViolationConstraintType = "DATE_MUST_BE_IN_THE_PAST"
	DIGITOUTOFBOUNDS       ConstraintViolationConstraintType = "DIGIT_OUT_OF_BOUNDS"
	INVALIDEMAIL           ConstraintViolationConstraintType = "INVALID_EMAIL"
	INVALIDRANGE           ConstraintViolationConstraintType = "INVALID_RANGE"
	INVALIDSIZE            ConstraintViolationConstraintType = "INVALID_SIZE"
	MUSTBEFALSE            ConstraintViolationConstraintType = "MUST_BE_FALSE"
	MUSTBEGREATEROREQUALTO ConstraintViolationConstraintType = "MUST_BE_GREATER_OR_EQUAL_TO"
	MUSTBEGREATERTHAN      ConstraintViolationConstraintType = "MUST_BE_GREATER_THAN"
	MUSTBELESSOREQUALTHAN  ConstraintViolationConstraintType = "MUST_BE_LESS_OR_EQUAL_THAN"
	MUSTBELESSTHAN         ConstraintViolationConstraintType = "MUST_BE_LESS_THAN"
	MUSTBENULL             ConstraintViolationConstraintType = "MUST_BE_NULL"
	MUSTBETRUE             ConstraintViolationConstraintType = "MUST_BE_TRUE"
	MUSTMATCHPATTERN       ConstraintViolationConstraintType = "MUST_MATCH_PATTERN"
	MUSTNOTBEEMPTY         ConstraintViolationConstraintType = "MUST_NOT_BE_EMPTY"
	MUSTNOTBENULL          ConstraintViolationConstraintType = "MUST_NOT_BE_NULL"
	UNKNOWN                ConstraintViolationConstraintType = "UNKNOWN"
)

// Defines values for OnlinePropertiesStatus.
const (
	ACTIVE OnlinePropertiesStatus = "ACTIVE"
	HIDDEN OnlinePropertiesStatus = "HIDDEN"
)

// Defines values for PriceCurrencyId.
const (
	AED PriceCurrencyId = "AED"
	AFA PriceCurrencyId = "AFA"
	AFN PriceCurrencyId = "AFN"
	ALL PriceCurrencyId = "ALL"
	AMD PriceCurrencyId = "AMD"
	ANG PriceCurrencyId = "ANG"
	AOA PriceCurrencyId = "AOA"
	ARS PriceCurrencyId = "ARS"
	AUD PriceCurrencyId = "AUD"
	AWG PriceCurrencyId = "AWG"
	AZM PriceCurrencyId = "AZM"
	AZN PriceCurrencyId = "AZN"
	BAM PriceCurrencyId = "BAM"
	BBD PriceCurrencyId = "BBD"
	BDT PriceCurrencyId = "BDT"
	BGN PriceCurrencyId = "BGN"
	BHD PriceCurrencyId = "BHD"
	BIF PriceCurrencyId = "BIF"
	BMD PriceCurrencyId = "BMD"
	BND PriceCurrencyId = "BND"
	BOB PriceCurrencyId = "BOB"
	BRL PriceCurrencyId = "BRL"
	BSD PriceCurrencyId = "BSD"
	BTN PriceCurrencyId = "BTN"
	BWP PriceCurrencyId = "BWP"
	BYR PriceCurrencyId = "BYR"
	BZD PriceCurrencyId = "BZD"
	CAD PriceCurrencyId = "CAD"
	CDF PriceCurrencyId = "CDF"
	CHF PriceCurrencyId = "CHF"
	CLP PriceCurrencyId = "CLP"
	CNY PriceCurrencyId = "CNY"
	COP PriceCurrencyId = "COP"
	CRC PriceCurrencyId = "CRC"
	CSD PriceCurrencyId = "CSD"
	CUC PriceCurrencyId = "CUC"
	CUP PriceCurrencyId = "CUP"
	CVE PriceCurrencyId = "CVE"
	CYP PriceCurrencyId = "CYP"
	CZK PriceCurrencyId = "CZK"
	DJF PriceCurrencyId = "DJF"
	DKK PriceCurrencyId = "DKK"
	DOP PriceCurrencyId = "DOP"
	DZD PriceCurrencyId = "DZD"
	EEK PriceCurrencyId = "EEK"
	EGP PriceCurrencyId = "EGP"
	ERN PriceCurrencyId = "ERN"
	ETB PriceCurrencyId = "ETB"
	EUR PriceCurrencyId = "EUR"
	FJD PriceCurrencyId = "FJD"
	FKP PriceCurrencyId = "FKP"
	GBP PriceCurrencyId = "GBP"
	GEL PriceCurrencyId = "GEL"
	GGP PriceCurrencyId = "GGP"
	GHC PriceCurrencyId = "GHC"
	GHS PriceCurrencyId = "GHS"
	GIP PriceCurrencyId = "GIP"
	GMD PriceCurrencyId = "GMD"
	GNF PriceCurrencyId = "GNF"
	GTQ PriceCurrencyId = "GTQ"
	GYD PriceCurrencyId = "GYD"
	HKD PriceCurrencyId = "HKD"
	HNL PriceCurrencyId = "HNL"
	HRK PriceCurrencyId = "HRK"
	HTG PriceCurrencyId = "HTG"
	HUF PriceCurrencyId = "HUF"
	IDR PriceCurrencyId = "IDR"
	ILS PriceCurrencyId = "ILS"
	IMP PriceCurrencyId = "IMP"
	INR PriceCurrencyId = "INR"
	IQD PriceCurrencyId = "IQD"
	IRR PriceCurrencyId = "IRR"
	ISK PriceCurrencyId = "ISK"
	JEP PriceCurrencyId = "JEP"
	JMD PriceCurrencyId = "JMD"
	JOD PriceCurrencyId = "JOD"
	JPY PriceCurrencyId = "JPY"
	KES PriceCurrencyId = "KES"
	KGS PriceCurrencyId = "KGS"
	KHR PriceCurrencyId = "KHR"
	KMF PriceCurrencyId = "KMF"
	KPW PriceCurrencyId = "KPW"
	KRW PriceCurrencyId = "KRW"
	KWD PriceCurrencyId = "KWD"
	KYD PriceCurrencyId = "KYD"
	KZT PriceCurrencyId = "KZT"
	LAK PriceCurrencyId = "LAK"
	LBP PriceCurrencyId = "LBP"
	LKR PriceCurrencyId = "LKR"
	LRD PriceCurrencyId = "LRD"
	LSL PriceCurrencyId = "LSL"
	LTL PriceCurrencyId = "LTL"
	LVL PriceCurrencyId = "LVL"
	LYD PriceCurrencyId = "LYD"
	MAD PriceCurrencyId = "MAD"
	MDL PriceCurrencyId = "MDL"
	MGA PriceCurrencyId = "MGA"
	MKD PriceCurrencyId = "MKD"
	MMK PriceCurrencyId = "MMK"
	MNT PriceCurrencyId = "MNT"
	MOP PriceCurrencyId = "MOP"
	MRO PriceCurrencyId = "MRO"
	MTL PriceCurrencyId = "MTL"
	MUR PriceCurrencyId = "MUR"
	MVR PriceCurrencyId = "MVR"
	MWK PriceCurrencyId = "MWK"
	MXN PriceCurrencyId = "MXN"
	MYR PriceCurrencyId = "MYR"
	MZM PriceCurrencyId = "MZM"
	MZN PriceCurrencyId = "MZN"
	NAD PriceCurrencyId = "NAD"
	NGN PriceCurrencyId = "NGN"
	NIO PriceCurrencyId = "NIO"
	NOK PriceCurrencyId = "NOK"
	NPR PriceCurrencyId = "NPR"
	NZD PriceCurrencyId = "NZD"
	OMR PriceCurrencyId = "OMR"
	PAB PriceCurrencyId = "PAB"
	PEN PriceCurrencyId = "PEN"
	PGK PriceCurrencyId = "PGK"
	PHP PriceCurrencyId = "PHP"
	PKR PriceCurrencyId = "PKR"
	PLN PriceCurrencyId = "PLN"
	PYG PriceCurrencyId = "PYG"
	QAR PriceCurrencyId = "QAR"
	RON PriceCurrencyId = "RON"
	RSD PriceCurrencyId = "RSD"
	RUB PriceCurrencyId = "RUB"
	RWF PriceCurrencyId = "RWF"
	SAR PriceCurrencyId = "SAR"
	SBD PriceCurrencyId = "SBD"
	SCR PriceCurrencyId = "SCR"
	SDD PriceCurrencyId = "SDD"
	SDG PriceCurrencyId = "SDG"
	SEK PriceCurrencyId = "SEK"
	SGD PriceCurrencyId = "SGD"
	SHP PriceCurrencyId = "SHP"
	SIT PriceCurrencyId = "SIT"
	SKK PriceCurrencyId = "SKK"
	SLL PriceCurrencyId = "SLL"
	SOS PriceCurrencyId = "SOS"
	SPL PriceCurrencyId = "SPL"
	SRD PriceCurrencyId = "SRD"
	SSP PriceCurrencyId = "SSP"
	STD PriceCurrencyId = "STD"
	SVC PriceCurrencyId = "SVC"
	SYP PriceCurrencyId = "SYP"
	SZL PriceCurrencyId = "SZL"
	THB PriceCurrencyId = "THB"
	TJS PriceCurrencyId = "TJS"
	TMM PriceCurrencyId = "TMM"
	TMT PriceCurrencyId = "TMT"
	TND PriceCurrencyId = "TND"
	TOP PriceCurrencyId = "TOP"
	TRL PriceCurrencyId = "TRL"
	TRY PriceCurrencyId = "TRY"
	TTD PriceCurrencyId = "TTD"
	TVD PriceCurrencyId = "TVD"
	TWD PriceCurrencyId = "TWD"
	TZS PriceCurrencyId = "TZS"
	UAH PriceCurrencyId = "UAH"
	UGX PriceCurrencyId = "UGX"
	USD PriceCurrencyId = "USD"
	UYU PriceCurrencyId = "UYU"
	UZS PriceCurrencyId = "UZS"
	VEB PriceCurrencyId = "VEB"
	VEF PriceCurrencyId = "VEF"
	VND PriceCurrencyId = "VND"
	VUV PriceCurrencyId = "VUV"
	WST PriceCurrencyId = "WST"
	XAF PriceCurrencyId = "XAF"
	XAG PriceCurrencyId = "XAG"
	XAU PriceCurrencyId = "XAU"
	XCD PriceCurrencyId = "XCD"
	XDR PriceCurrencyId = "XDR"
	XOF PriceCurrencyId = "XOF"
	XPD PriceCurrencyId = "XPD"
	XPF PriceCurrencyId = "XPF"
	XPT PriceCurrencyId = "XPT"
	YER PriceCurrencyId = "YER"
	ZAR PriceCurrencyId = "ZAR"
	ZMK PriceCurrencyId = "ZMK"
	ZMW PriceCurrencyId = "ZMW"
	ZWD PriceCurrencyId = "ZWD"
	ZWL PriceCurrencyId = "ZWL"
)

// Defines values for ShippingShippingPricingModel.
const (
	FREE     ShippingShippingPricingModel = "FREE"
	STANDARD ShippingShippingPricingModel = "STANDARD"
)

// Defines values for WeightUnit.
const (
	G  WeightUnit = "g"
	Kg WeightUnit = "kg"
	Lb WeightUnit = "lb"
	Oz WeightUnit = "oz"
)

// CategoryDTO defines model for CategoryDTO.
type CategoryDTO struct {
	Name string             `json:"name"`
	Uuid openapi_types.UUID `json:"uuid"`
}

// ConstraintViolation defines model for ConstraintViolation.
type ConstraintViolation struct {
	ConstraintType   *ConstraintViolationConstraintType `json:"constraintType,omitempty"`
	DeveloperMessage *string                            `json:"developerMessage,omitempty"`
	Expected         *string                            `json:"expected,omitempty"`
	PropertyName     *string                            `json:"propertyName,omitempty"`
	Value            *string                            `json:"value,omitempty"`
}

// ConstraintViolationConstraintType defines model for ConstraintViolation.ConstraintType.
type ConstraintViolationConstraintType string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	DeveloperMessage *string                `json:"developerMessage,omitempty"`
	ErrorType        *string                `json:"errorType,omitempty"`
	Violations       *[]ConstraintViolation `json:"violations,omitempty"`
}

// FullProductUpdateRequest defines model for FullProductUpdateRequest.
type FullProductUpdateRequest struct {
	Categories               *[]string                 `json:"categories,omitempty"`
	Category                 *CategoryDTO              `json:"category,omitempty"`
	Description              *string                   `json:"description,omitempty"`
	ExternalReference        *string                   `json:"externalReference,omitempty"`
	ImageLookupKeys          *[]string                 `json:"imageLookupKeys,omitempty"`
	Metadata                 *MetadataDTO              `json:"metadata,omitempty"`
	Name                     string                    `json:"name"`
	Online                   *OnlineProperties         `json:"online,omitempty"`
	Presentation             *PresentationDTO          `json:"presentation,omitempty"`
	TaxCode                  *string                   `json:"taxCode,omitempty"`
	TaxExempt                *bool                     `json:"taxExempt,omitempty"`
	TaxRates                 *[]openapi_types.UUID     `json:"taxRates,omitempty"`
	UnitName                 *string                   `json:"unitName,omitempty"`
	Uuid                     openapi_types.UUID        `json:"uuid"`
	VariantOptionDefinitions *VariantOptionDefinitions `json:"variantOptionDefinitions,omitempty"`
	Variants                 *[]VariantDTO             `json:"variants,omitempty"`
	VatPercentage            *string                   `json:"vatPercentage,omitempty"`
}

// MetadataDTO defines model for MetadataDTO.
type MetadataDTO struct {
	InPos  bool       `json:"inPos"`
	Source *SourceDTO `json:"source,omitempty"`
}

// OnlineProperties defines model for OnlineProperties.
type OnlineProperties struct {
	Description  *string                   `json:"description,omitempty"`
	Presentation *Presentation             `json:"presentation,omitempty"`
	Seo          *SearchEngineOptimization `json:"seo,omitempty"`
	Shipping     *Shipping                 `json:"shipping,omitempty"`
	Status       OnlinePropertiesStatus    `json:"status"`
	Title        *string                   `json:"title,omitempty"`
}

// OnlinePropertiesStatus defines model for OnlineProperties.Status.
type OnlinePropertiesStatus string

// Presentation defines model for Presentation.
type Presentation struct {
	AdditionalImageUrls *[]string `json:"additionalImageUrls,omitempty"`
	DisplayImageUrl     *string   `json:"displayImageUrl,omitempty"`
	MediaUrls           *[]string `json:"mediaUrls,omitempty"`
}

// PresentationDTO defines model for PresentationDTO.
type PresentationDTO struct {
	BackgroundColor *string `json:"backgroundColor,omitempty"`
	ImageUrl        *string `json:"imageUrl,omitempty"`
	TextColor       *string `json:"textColor,omitempty"`
}

// Price defines model for Price.
type Price struct {
	Amount     int64           `json:"amount"`
	CurrencyId PriceCurrencyId `json:"currencyId"`
}

// PriceCurrencyId defines model for Price.CurrencyId.
type PriceCurrencyId string

// ProductResponse defines model for ProductResponse.
type ProductResponse struct {
	Categories               *[]string                 `json:"categories,omitempty"`
	Category                 *CategoryDTO              `json:"category,omitempty"`
	Created                  *string                   `json:"created"`
	Description              *string                   `json:"description,omitempty"`
	Etag                     string                    `json:"etag"`
	ExternalReference        *string                   `json:"externalReference,omitempty"`
	ImageLookupKeys          *[]string                 `json:"imageLookupKeys,omitempty"`
	Metadata                 *MetadataDTO              `json:"metadata,omitempty"`
	Name                     string                    `json:"name"`
	Online                   *OnlineProperties         `json:"online,omitempty"`
	Presentation             *PresentationDTO          `json:"presentation,omitempty"`
	TaxCode                  *string                   `json:"taxCode,omitempty"`
	TaxExempt                *bool                     `json:"taxExempt,omitempty"`
	TaxRates                 *[]openapi_types.UUID     `json:"taxRates,omitempty"`
	UnitName                 *string                   `json:"unitName,omitempty"`
	Updated                  *string                   `json:"updated"`
	UpdatedBy                *openapi_types.UUID       `json:"updatedBy,omitempty"`
	Uuid                     openapi_types.UUID        `json:"uuid"`
	VariantOptionDefinitions *VariantOptionDefinitions `json:"variantOptionDefinitions,omitempty"`
	Variants                 []VariantDTO              `json:"variants"`
	VatPercentage            *string                   `json:"vatPercentage,omitempty"`
}

// SearchEngineOptimization defines model for SearchEngineOptimization.
type SearchEngineOptimization struct {
	MetaDescription *string `json:"metaDescription,omitempty"`
	Slug            *string `json:"slug,omitempty"`
	Title           *string `json:"title,omitempty"`
}

// Shipping defines model for Shipping.
type Shipping struct {
	ShippingPricingModel *ShippingShippingPricingModel `json:"shippingPricingModel,omitempty"`
	Weight               *Weight                       `json:"weight,omitempty"`
	WeightInGrams        *int64                        `json:"weightInGrams,omitempty"`
}

// ShippingShippingPricingModel defines model for Shipping.ShippingPricingModel.
type ShippingShippingPricingModel string

// SourceDTO defines model for SourceDTO.
type SourceDTO struct {
	External *bool   `json:"external,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// VariantDTO defines model for VariantDTO.
type VariantDTO struct {
	Barcode      *string            `json:"barcode,omitempty"`
	CostPrice    *Price             `json:"costPrice,omitempty"`
	Description  *string            `json:"description,omitempty"`
	Name         *string            `json:"name,omitempty"`
	Options      *[]VariantOption   `json:"options,omitempty"`
	Presentation *PresentationDTO   `json:"presentation,omitempty"`
	Price        *Price             `json:"price,omitempty"`
	Sku          *string            `json:"sku,omitempty"`
	Uuid         openapi_types.UUID `json:"uuid"`
	// Deprecated:
	VatPercentage *string 					`json:"vatPercentage,omitempty"`
}

// VariantOption defines model for VariantOption.
type VariantOption struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// VariantOptionDefinition defines model for VariantOptionDefinition.
type VariantOptionDefinition struct {
	Name       string                    `json:"name"`
	Properties []VariantOptionProperties `json:"properties"`
}

// VariantOptionDefinitions defines model for VariantOptionDefinitions.
type VariantOptionDefinitions struct {
	Definitions []VariantOptionDefinition `json:"definitions"`
}

// VariantOptionProperties defines model for VariantOptionProperties.
type VariantOptionProperties struct {
	ImageUrl *string `json:"imageUrl,omitempty"`
	Value    string  `json:"value"`
}

// Weight defines model for Weight.
type Weight struct {
	Unit   WeightUnit `json:"unit"`
	Weight float32    `json:"weight"`
}

// WeightUnit defines model for Weight.Unit.
type WeightUnit string

// GetAllProductsV2Params defines parameters for GetAllProductsV2.
type GetAllProductsV2Params struct {
	// Sort If true, sorts response by created date
	Sort *bool `form:"sort,omitempty" json:"sort,omitempty"`
}

// UpdateProductParams defines parameters for UpdateProduct.
type UpdateProductParams struct {
	IfMatch *string `json:"If-Match,omitempty"`
}

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody = FullProductUpdateRequest
