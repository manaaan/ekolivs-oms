// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: api/service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DemandService_CreateDemand_FullMethodName = "/DemandService/CreateDemand"
)

// DemandServiceClient is the client API for DemandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemandServiceClient interface {
	CreateDemand(ctx context.Context, in *CreateDemand_Req, opts ...grpc.CallOption) (*Demand, error)
}

type demandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDemandServiceClient(cc grpc.ClientConnInterface) DemandServiceClient {
	return &demandServiceClient{cc}
}

func (c *demandServiceClient) CreateDemand(ctx context.Context, in *CreateDemand_Req, opts ...grpc.CallOption) (*Demand, error) {
	out := new(Demand)
	err := c.cc.Invoke(ctx, DemandService_CreateDemand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemandServiceServer is the server API for DemandService service.
// All implementations must embed UnimplementedDemandServiceServer
// for forward compatibility
type DemandServiceServer interface {
	CreateDemand(context.Context, *CreateDemand_Req) (*Demand, error)
	mustEmbedUnimplementedDemandServiceServer()
}

// UnimplementedDemandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDemandServiceServer struct {
}

func (UnimplementedDemandServiceServer) CreateDemand(context.Context, *CreateDemand_Req) (*Demand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDemand not implemented")
}
func (UnimplementedDemandServiceServer) mustEmbedUnimplementedDemandServiceServer() {}

// UnsafeDemandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemandServiceServer will
// result in compilation errors.
type UnsafeDemandServiceServer interface {
	mustEmbedUnimplementedDemandServiceServer()
}

func RegisterDemandServiceServer(s grpc.ServiceRegistrar, srv DemandServiceServer) {
	s.RegisterService(&DemandService_ServiceDesc, srv)
}

func _DemandService_CreateDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDemand_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemandServiceServer).CreateDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DemandService_CreateDemand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemandServiceServer).CreateDemand(ctx, req.(*CreateDemand_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// DemandService_ServiceDesc is the grpc.ServiceDesc for DemandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DemandService",
	HandlerType: (*DemandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDemand",
			Handler:    _DemandService_CreateDemand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service.proto",
}
